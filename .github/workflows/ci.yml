#############################################################
#   WARNING: automatically generated file, DO NOT CHANGE!   #
#############################################################

# This file was automatically generated by the expand-yaml-anchors tool. The
# source file that generated this one is:
#
#   src/ci/github-actions/ci.yml
#
# Once you make changes to that file you need to run:
#
#   ./x.py run src/tools/expand-yaml-anchors/
#
# The CI build will fail if the tool is not run after changes to this file.

---
name: CI
"on":
  push:
    branches:
      - "*"
permissions:
  contents: read
defaults:
  run:
    shell: bash
jobs:
  pr:
    name: PR
    env:
      CI_JOB_NAME: "${{ matrix.name }}"
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
      SCCACHE_BUCKET: rust-lang-ci-sccache2
      TOOLSTATE_REPO: "https://github.com/rust-lang-nursery/rust-toolstate"
      CACHE_DOMAIN: ci-caches.rust-lang.org
    strategy:
      matrix:
        include:
          - name: dist-x86_64-linux
            os: ubuntu-20.04
            env: {}
          - name: dist-x86_64-apple
            env:
              SCRIPT: "./x.py dist bootstrap --include-default-paths --host=x86_64-apple-darwin --target=x86_64-apple-darwin"
              RUST_CONFIGURE_ARGS: "--enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false --set rust.lto=thin"
              RUSTC_RETRY_LINKER_ON_SEGFAULT: 1
              MACOSX_DEPLOYMENT_TARGET: 10.7
              SELECT_XCODE: /Applications/Xcode_13.4.1.app
              NO_LLVM_ASSERTIONS: 1
              NO_DEBUG_ASSERTIONS: 1
              NO_OVERFLOW_CHECKS: 1
              DIST_REQUIRE_ALL_TOOLS: 1
            os: macos-12
          - name: dist-x86_64-msvc
            env:
              RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-msvc --host=x86_64-pc-windows-msvc --target=x86_64-pc-windows-msvc --enable-full-tools --enable-profiler"
              SCRIPT: PGO_HOST=x86_64-pc-windows-msvc python src/ci/stage-build.py python x.py dist bootstrap --include-default-paths
              DIST_REQUIRE_ALL_TOOLS: 1
            os: windows-latest
    timeout-minutes: 600
    runs-on: "${{ matrix.os }}"
    steps:
      - name: disable git crlf conversion
        run: git config --global core.autocrlf false
      - name: checkout the source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: configure the PR in which the error message will be posted
        run: "echo \"[CI_PR_NUMBER=$num]\""
        env:
          num: "${{ github.event.number }}"
        if: "success() && !env.SKIP_JOB && github.event_name == 'pull_request'"
      - name: add extra environment variables
        run: src/ci/scripts/setup-environment.sh
        env:
          EXTRA_VARIABLES: "${{ toJson(matrix.env) }}"
        if: success() && !env.SKIP_JOB
      - name: collect CPU statistics
        run: src/ci/scripts/collect-cpu-stats.sh
        if: success() && !env.SKIP_JOB
      - name: show the current environment
        run: src/ci/scripts/dump-environment.sh
        if: success() && !env.SKIP_JOB
      - name: install awscli
        run: src/ci/scripts/install-awscli.sh
        if: success() && !env.SKIP_JOB
      - name: install sccache
        run: src/ci/scripts/install-sccache.sh
        if: success() && !env.SKIP_JOB
      - name: select Xcode
        run: src/ci/scripts/select-xcode.sh
        if: success() && !env.SKIP_JOB
      - name: install clang
        run: src/ci/scripts/install-clang.sh
        if: success() && !env.SKIP_JOB
      - name: install WIX
        run: src/ci/scripts/install-wix.sh
        if: success() && !env.SKIP_JOB
      - name: disable git crlf conversion
        run: src/ci/scripts/disable-git-crlf-conversion.sh
        if: success() && !env.SKIP_JOB
      - name: checkout submodules
        run: src/ci/scripts/checkout-submodules.sh
        if: success() && !env.SKIP_JOB
      - name: install MSYS2
        run: src/ci/scripts/install-msys2.sh
        if: success() && !env.SKIP_JOB
      - name: install MinGW
        run: src/ci/scripts/install-mingw.sh
        if: success() && !env.SKIP_JOB
      - name: install ninja
        run: src/ci/scripts/install-ninja.sh
        if: success() && !env.SKIP_JOB
      - name: enable ipv6 on Docker
        run: src/ci/scripts/enable-docker-ipv6.sh
        if: success() && !env.SKIP_JOB
      - name: disable git crlf conversion
        run: src/ci/scripts/disable-git-crlf-conversion.sh
        if: success() && !env.SKIP_JOB
      - name: ensure line endings are correct
        run: src/ci/scripts/verify-line-endings.sh
        if: success() && !env.SKIP_JOB
      - name: run the build
        run: src/ci/scripts/run-build-from-ci.sh
        env:
          AWS_ACCESS_KEY_ID: "${{ env.CACHES_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}"
          TOOLSTATE_REPO_ACCESS_TOKEN: "${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}"
        if: success() && !env.SKIP_JOB
